version: '3.9'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: saas-backend:staging
    container_name: saas-backend-staging
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://staging_user:${DB_PASSWORD}@db:5432/saas_staging
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - DEBUG=false
      - ALLOWED_ORIGINS=https://staging.domain.com
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      - db
      - redis
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - saas-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: saas-frontend:staging
    container_name: saas-frontend-staging
    environment:
      - VITE_API_URL=https://staging-api.domain.com
      - VITE_ENVIRONMENT=staging
    ports:
      - "8080:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - saas-network

  db:
    image: postgres:15-alpine
    container_name: saas-db-staging
    environment:
      - POSTGRES_DB=saas_staging
      - POSTGRES_USER=staging_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - staging_db_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U staging_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - saas-network

  redis:
    image: redis:7-alpine
    container_name: saas-redis-staging
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - staging_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - saas-network

  prometheus:
    image: prom/prometheus:latest
    container_name: saas-prometheus-staging
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - staging_prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - saas-network

  grafana:
    image: grafana/grafana:latest
    container_name: saas-grafana-staging
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - staging_grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - saas-network

volumes:
  staging_db_data:
  staging_redis_data:
  staging_prometheus_data:
  staging_grafana_data:

networks:
  saas-network:
    driver: bridge
