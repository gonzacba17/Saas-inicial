name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  python-security:
    name: Python Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety semgrep
        cd backend && pip install -r requirements.txt
        
    - name: Run Bandit security linter
      run: |
        cd backend
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -f txt
        
    - name: Run Safety check for known vulnerabilities
      run: |
        cd backend
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Run Semgrep security scan
      run: |
        semgrep --config=auto backend/app/ --json --output=semgrep-report.json || true
        semgrep --config=auto backend/app/
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: python-security-reports
        path: |
          backend/bandit-report.json
          backend/safety-report.json
          semgrep-report.json

  nodejs-security:
    name: Node.js Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level=moderate --json > npm-audit-report.json || true
        npm audit --audit-level=moderate
        
    - name: Run ESLint security scan
      run: |
        cd frontend
        npx eslint . --ext .ts,.tsx --format json -o eslint-report.json || true
        npx eslint . --ext .ts,.tsx
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: nodejs-security-reports
        path: |
          frontend/npm-audit-report.json
          frontend/eslint-report.json

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build backend image
      run: |
        cd backend
        docker build -t saas-backend:latest .
        
    - name: Build frontend image
      run: |
        cd frontend
        docker build -t saas-frontend:latest .
        
    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
    - name: Scan backend image with Trivy
      run: |
        trivy image --format json --output backend-trivy-report.json saas-backend:latest || true
        trivy image saas-backend:latest
        
    - name: Scan frontend image with Trivy
      run: |
        trivy image --format json --output frontend-trivy-report.json saas-frontend:latest || true
        trivy image saas-frontend:latest
        
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: docker-security-reports
        path: |
          backend-trivy-report.json
          frontend-trivy-report.json

  code-quality:
    name: Code Quality & SAST
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=saas-cafeterias
          -Dsonar.organization=your-org
          -Dsonar.sources=backend/app,frontend/src
          -Dsonar.exclusions=**/node_modules/**,**/venv/**,**/__pycache__/**
          -Dsonar.python.coverage.reportPaths=backend/coverage.xml
          -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
      continue-on-error: true

  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Install OWASP Dependency Check
      run: |
        wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.4.0/dependency-check-8.4.0-release.zip
        unzip dependency-check-8.4.0-release.zip
        
    - name: Run OWASP Dependency Check
      run: |
        ./dependency-check/bin/dependency-check.sh \
          --project "SaaS Cafeterias" \
          --scan backend/ \
          --scan frontend/ \
          --format JSON \
          --format HTML \
          --out dependency-check-report \
          --enableExperimental
          
    - name: Upload dependency check reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-check-reports
        path: dependency-check-report/

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        
    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      with:
        args: --verbose --redact
        
    - name: Install TruffleHog
      run: |
        pip install truffleHog3
        
    - name: Run TruffleHog
      run: |
        trufflehog3 --format json --output trufflehog-report.json . || true
        
    - name: Upload secrets scan reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: secrets-scan-reports
        path: trufflehog-report.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [python-security, nodejs-security, docker-security, dependency-check, secrets-scan]
    if: always()
    
    steps:
    - name: Download all reports
      uses: actions/download-artifact@v4
      
    - name: Generate security summary
      run: |
        echo "# Security Scan Summary" > security-summary.md
        echo "" >> security-summary.md
        echo "## Scan Results" >> security-summary.md
        echo "" >> security-summary.md
        
        # Count files in each report directory
        if [ -d "python-security-reports" ]; then
          echo "✅ Python Security Scan: $(ls python-security-reports/ | wc -l) reports generated" >> security-summary.md
        else
          echo "❌ Python Security Scan: Failed" >> security-summary.md
        fi
        
        if [ -d "nodejs-security-reports" ]; then
          echo "✅ Node.js Security Scan: $(ls nodejs-security-reports/ | wc -l) reports generated" >> security-summary.md
        else
          echo "❌ Node.js Security Scan: Failed" >> security-summary.md
        fi
        
        if [ -d "docker-security-reports" ]; then
          echo "✅ Docker Security Scan: $(ls docker-security-reports/ | wc -l) reports generated" >> security-summary.md
        else
          echo "❌ Docker Security Scan: Failed" >> security-summary.md
        fi
        
        if [ -d "dependency-check-reports" ]; then
          echo "✅ Dependency Check: $(ls dependency-check-reports/ | wc -l) reports generated" >> security-summary.md
        else
          echo "❌ Dependency Check: Failed" >> security-summary.md
        fi
        
        if [ -d "secrets-scan-reports" ]; then
          echo "✅ Secrets Scan: $(ls secrets-scan-reports/ | wc -l) reports generated" >> security-summary.md
        else
          echo "❌ Secrets Scan: Failed" >> security-summary.md
        fi
        
        echo "" >> security-summary.md
        echo "## Next Steps" >> security-summary.md
        echo "1. Review all security reports in the artifacts" >> security-summary.md
        echo "2. Address any HIGH or CRITICAL vulnerabilities immediately" >> security-summary.md
        echo "3. Update dependencies with known vulnerabilities" >> security-summary.md
        echo "4. Fix any secrets or sensitive data exposure" >> security-summary.md
        echo "5. Consider implementing additional security controls" >> security-summary.md
        
        cat security-summary.md
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security-summary.md