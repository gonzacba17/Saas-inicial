name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: saas_test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 bandit safety pytest-cov
    
    - name: Lint with flake8
      run: |
        cd backend
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Security check with bandit
      run: |
        cd backend
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ --exit-zero-on-skipped
    
    - name: Safety check for dependencies
      run: |
        cd backend
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Test with pytest
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saas_test_db
        SECRET_KEY: test-secret-key-for-ci-cd-pipeline-very-long-and-secure
        ALLOWED_ORIGINS: http://localhost:3000,http://localhost:5173
      run: |
        cd backend
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage
        path: backend/htmlcov/

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Lint with ESLint
      run: |
        cd frontend
        npm run lint
    
    - name: Type check with TypeScript
      run: |
        cd frontend
        npm run type-check || npx tsc --noEmit
    
    - name: Build project
      run: |
        cd frontend
        npm run build
    
    - name: Test with Vitest
      run: |
        cd frontend
        npm run test:coverage
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/
    
    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-coverage
        path: frontend/coverage/

  security-audit:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level moderate
    
    - name: Check for outdated dependencies
      run: |
        cd frontend
        npm outdated || true
        cd ../backend
        pip list --outdated || true

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: saas_integration_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python and Node.js
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Start backend server
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/saas_integration_db
        SECRET_KEY: integration-test-secret-key-very-long-and-secure
        ALLOWED_ORIGINS: http://localhost:5173
      run: |
        cd backend
        uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        sleep 10
    
    - name: Build and start frontend
      run: |
        cd frontend
        npm run build
        npm run preview &
        sleep 5
    
    - name: Health check
      run: |
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:4173 || exit 1