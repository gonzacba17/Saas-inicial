name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_modularbiz_saas
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Lint with flake8 (if available)
      working-directory: ./backend
      run: |
        # Install flake8 if you want linting
        # pip install flake8
        # flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        echo "Linting step placeholder"
    
    - name: Test with pytest
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_modularbiz_saas
        SECRET_KEY: test-secret-key-for-ci
      run: |
        # Run existing tests
        pytest tests/ -v

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Lint frontend
      working-directory: ./frontend
      run: |
        # Add linting when configured
        echo "Frontend linting placeholder"
        # npm run lint
    
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
    
    - name: Test frontend
      working-directory: ./frontend
      run: |
        # Run existing tests
        npm test

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools (optional)
      run: |
        # pip install bandit safety
        echo "Security scanning placeholder"
    
    - name: Run security scan
      run: |
        # bandit -r backend/app/
        # safety check --file backend/requirements.txt
        echo "Security scan placeholder - can be enabled later"

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker images
      run: |
        echo "Building Docker images..."
        docker-compose build
    
    - name: Deploy (placeholder)
      run: |
        echo "Deployment step placeholder"
        echo "Would deploy to staging/production environment"