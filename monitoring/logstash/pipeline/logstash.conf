input {
  # Receive logs from Filebeat
  beats {
    port => 5044
  }
  
  # Direct syslog input
  syslog {
    port => 5000
  }
  
  # HTTP input for application logs
  http {
    port => 8080
    codec => "json"
  }
}

filter {
  # Parse JSON logs from backend
  if [service] == "saas-backend" {
    if [message] =~ /^{.*}$/ {
      json {
        source => "message"
        target => "app_log"
      }
      
      # Extract log level
      if [app_log][level] {
        mutate {
          add_field => { "log_level" => "%{[app_log][level]}" }
        }
      }
      
      # Extract user_id if present
      if [app_log][user_id] {
        mutate {
          add_field => { "user_id" => "%{[app_log][user_id]}" }
        }
      }
      
      # Extract request_id for tracing
      if [app_log][request_id] {
        mutate {
          add_field => { "request_id" => "%{[app_log][request_id]}" }
        }
      }
    }
  }
  
  # Parse container logs
  if [container] {
    # Add container metadata
    mutate {
      add_field => { "container_name" => "%{[container][name]}" }
      add_field => { "container_image" => "%{[container][image]}" }
    }
  }
  
  # Security log parsing
  if [log_type] == "system" and [message] =~ /Failed password/ {
    grok {
      match => { "message" => "Failed password for %{USER:failed_user} from %{IP:source_ip}" }
      tag_on_failure => ["_grok_auth_failure"]
    }
    
    if "_grok_auth_failure" not in [tags] {
      mutate {
        add_field => { "alert_type" => "auth_failure" }
        add_field => { "severity" => "warning" }
      }
    }
  }
  
  # Performance log parsing
  if [service] == "saas-backend" and [message] =~ /response_time/ {
    grok {
      match => { 
        "message" => ".*response_time:(?<response_time_ms>\d+)ms.*path:(?<endpoint_path>[^\s]+)" 
      }
    }
    
    # Convert response time to number for aggregation
    if [response_time_ms] {
      mutate {
        convert => { "response_time_ms" => "integer" }
      }
      
      # Tag slow responses
      if [response_time_ms] and [response_time_ms] > 2000 {
        mutate {
          add_field => { "performance_issue" => "slow_response" }
        }
      }
    }
  }
  
  # Business event parsing
  if [service] == "saas-backend" and [message] =~ /(order_created|payment_processed|user_registered)/ {
    grok {
      match => { 
        "message" => ".*event:(?<business_event>[^\s]+).*amount:(?<amount>\d+\.\d+)" 
      }
    }
    
    if [amount] {
      mutate {
        convert => { "amount" => "float" }
        add_field => { "event_type" => "business_metric" }
      }
    }
  }
  
  # Error log parsing
  if [log_level] and [log_level] in ["ERROR", "CRITICAL"] {
    mutate {
      add_field => { "needs_investigation" => "true" }
    }
    
    # Extract stack traces
    if [message] =~ /Traceback/ {
      multiline {
        pattern => "^Traceback"
        what => "previous"
        negate => true
      }
    }
  }
  
  # Add timestamp parsing
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
  }
  
  # Geo IP enrichment for external IPs
  if [source_ip] and [source_ip] !~ /^(10\.|192\.168\.|172\.)/ {
    geoip {
      source => "source_ip"
      target => "geo_ip"
    }
  }
  
  # Remove unwanted fields
  mutate {
    remove_field => ["beat", "prospector", "input", "host_original"]
  }
}

output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "saas-logs-%{+YYYY.MM.dd}"
    template_name => "saas-logs"
    template_pattern => "saas-logs-*"
    template => {
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "message" => { "type" => "text" }
          "log_level" => { "type" => "keyword" }
          "service" => { "type" => "keyword" }
          "environment" => { "type" => "keyword" }
          "user_id" => { "type" => "keyword" }
          "request_id" => { "type" => "keyword" }
          "response_time_ms" => { "type" => "integer" }
          "amount" => { "type" => "float" }
          "source_ip" => { "type" => "ip" }
          "geo_ip" => {
            "properties" => {
              "location" => { "type" => "geo_point" }
            }
          }
        }
      }
    }
  }
  
  # Send critical errors to alerts
  if [log_level] == "CRITICAL" or [alert_type] {
    http {
      url => "http://alertmanager:9093/api/v1/alerts"
      http_method => "post"
      format => "json"
      mapping => {
        "alerts" => [
          {
            "labels" => {
              "alertname" => "LogAlert"
              "severity" => "%{severity}"
              "service" => "%{service}"
              "log_level" => "%{log_level}"
            }
            "annotations" => {
              "summary" => "Critical log event detected"
              "description" => "%{message}"
            }
          }
        ]
      }
    }
  }
  
  # Debug output (remove in production)
  if [environment] != "production" {
    stdout {
      codec => rubydebug
    }
  }
}