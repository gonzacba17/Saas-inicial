"""
End-to-End (E2E) testing suite for complete user flows.
Tests the full stack: Frontend UI interactions + Backend API responses.
"""
import pytest
import requests
import time
try:
    from selenium import webdriver
    SELENIUM_AVAILABLE = True
except ImportError:
    SELENIUM_AVAILABLE = False
    # Mock selenium classes for testing without selenium
    class MockWebDriver:
        def __init__(self, *args, **kwargs):
            pass
        def quit(self):
            pass
    webdriver = type('webdriver', (), {'Chrome': MockWebDriver})()

if SELENIUM_AVAILABLE:
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from selenium.webdriver.chrome.options import Options
    from selenium.common.exceptions import TimeoutException, NoSuchElementException
else:
    # Mock selenium modules
    By = type('By', (), {'ID': 'id', 'CLASS_NAME': 'class'})()
    WebDriverWait = lambda driver, timeout: type('WebDriverWait', (), {'until': lambda x: True})()
    expected_conditions = type('EC', (), {'presence_of_element_located': lambda x: True})()
    Options = type('Options', (), {'add_argument': lambda x: None})
    TimeoutException = Exception
    NoSuchElementException = Exception
import json
from typing import Dict, Optional


class E2ETestSuite:
    """Comprehensive End-to-End testing for SaaS Cafeterias platform."""
    
    def __init__(self):
        self.backend_url = "http://localhost:8000"
        self.frontend_url = "http://localhost:5173"
        self.driver = None
        self.wait = None
        self.admin_token = None
        self.test_results = {
            'total_tests': 0,
            'passed': 0,
            'failed': 0,
            'skipped': 0,
            'errors': []
        }
    
    def setup_driver(self):
        """Setup Chrome driver for E2E testing."""
        if not SELENIUM_AVAILABLE:
            print("‚ö†Ô∏è Selenium not available - E2E tests will be skipped")
            return False
            
        try:
            chrome_options = Options()
            chrome_options.add_argument("--headless")  # Run in headless mode
            chrome_options.add_argument("--no-sandbox")
            chrome_options.add_argument("--disable-dev-shm-usage")
            chrome_options.add_argument("--disable-gpu")
            chrome_options.add_argument("--window-size=1920,1080")
            
            self.driver = webdriver.Chrome(options=chrome_options)
            self.wait = WebDriverWait(self.driver, 10)
            return True
        except Exception as e:
            print(f"‚ùå Could not setup Chrome driver: {e}")
            print("üí° Install ChromeDriver: https://chromedriver.chromium.org/")
            return False
    
    def teardown_driver(self):
        """Clean up WebDriver."""
        if self.driver:
            self.driver.quit()
    
    def check_services(self) -> Dict[str, bool]:
        """Check if backend and frontend services are running."""
        services = {'backend': False, 'frontend': False}
        
        # Check backend
        try:
            response = requests.get(f"{self.backend_url}/health", timeout=5)
            services['backend'] = response.status_code == 200
        except Exception:
            pass
        
        # Check frontend
        try:
            response = requests.get(self.frontend_url, timeout=5)
            services['frontend'] = response.status_code == 200
        except Exception:
            pass
        
        return services
    
    def test_01_services_running(self):
        """Verify backend and frontend services are accessible."""
        print("\nüîç CHECKING SERVICES STATUS")
        print("=" * 50)
        
        services = self.check_services()
        
        if not services['backend']:
            raise Exception("Backend not running. Start with: cd backend && python -m uvicorn app.main:app --reload")
        
        if not services['frontend']:
            raise Exception("Frontend not running. Start with: cd frontend && npm run dev")
        
        print("‚úÖ Backend running at:", self.backend_url)
        print("‚úÖ Frontend running at:", self.frontend_url)
        
        # Setup admin token for API validation
        try:
            response = requests.post(f"{self.backend_url}/api/v1/auth/login", 
                                   data={"username": "admin", "password": "Admin1234!"})
            if response.status_code == 200:
                self.admin_token = response.json()["access_token"]
                print("‚úÖ Admin authentication successful")
        except Exception:
            print("‚ö†Ô∏è  Admin not available - some tests may be skipped")
    
    def test_02_frontend_login_flow(self):
        """Test complete frontend login flow with error handling."""
        print("\nüîê TESTING FRONTEND LOGIN FLOW")
        print("=" * 50)
        
        if not self.setup_driver():
            raise Exception("Could not setup WebDriver")
        
        try:
            # Navigate to login page
            self.driver.get(f"{self.frontend_url}/login")
            time.sleep(2)
            
            print("‚úÖ Login page loaded")
            
            # Test invalid credentials (should show error)
            username_field = self.wait.until(EC.presence_of_element_located((By.NAME, "username")))
            password_field = self.driver.find_element(By.NAME, "password")
            login_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            
            username_field.send_keys("invalid_user")
            password_field.send_keys("wrong_password")
            login_button.click()
            
            # Wait for error message
            try:
                error_element = self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "[class*='error'], [class*='red']")))
                print("‚úÖ Invalid credentials error displayed correctly")
            except TimeoutException:
                print("‚ö†Ô∏è  Error message not found (might be using different CSS classes)")
            
            # Clear fields and test valid credentials
            username_field.clear()
            password_field.clear()
            
            username_field.send_keys("admin")
            password_field.send_keys("Admin1234!")
            login_button.click()
            
            # Wait for redirect (successful login)
            try:
                self.wait.until(lambda driver: driver.current_url != f"{self.frontend_url}/login")
                print("‚úÖ Successful login and redirect")
                current_url = self.driver.current_url
                print(f"   Redirected to: {current_url}")
            except TimeoutException:
                print("‚ùå Login failed or no redirect occurred")
                # Check if still on login page with error
                try:
                    error_element = self.driver.find_element(By.CSS_SELECTOR, "[class*='error'], [class*='red']")
                    print(f"   Error displayed: {error_element.text}")
                except NoSuchElementException:
                    print("   No error displayed but login failed")
            
        finally:
            self.teardown_driver()
    
    def test_03_admin_permissions_frontend(self):
        """Test admin permissions and 403 error handling in frontend."""
        print("\nüëÆ TESTING ADMIN PERMISSIONS IN FRONTEND")
        print("=" * 50)
        
        if not self.setup_driver():
            raise Exception("Could not setup WebDriver")
        
        try:
            # Login as admin first
            self.driver.get(f"{self.frontend_url}/login")
            time.sleep(2)
            
            username_field = self.wait.until(EC.presence_of_element_located((By.NAME, "username")))
            password_field = self.driver.find_element(By.NAME, "password")
            login_button = self.driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
            
            username_field.send_keys("admin")
            password_field.send_keys("Admin1234!")
            login_button.click()
            
            # Wait for successful login
            self.wait.until(lambda driver: driver.current_url != f"{self.frontend_url}/login")
            print("‚úÖ Admin logged in successfully")
            
            # Navigate to businesses page (admin should have access)
            self.driver.get(f"{self.frontend_url}/cafes")
            time.sleep(2)
            
            # Check if businesses page loaded (no 403 error)
            try:
                # Look for business-related content or no error messages
                page_source = self.driver.page_source.lower()
                if "403" in page_source or "forbidden" in page_source or "access denied" in page_source:
                    print("‚ùå Admin got 403 error on businesses page")
                else:
                    print("‚úÖ Admin can access businesses page")
            except Exception as e:
                print(f"‚ö†Ô∏è  Could not verify businesses page access: {e}")
            
            # Test creating a business (admin should be able to)
            try:
                # Look for create business button or form
                create_button = self.driver.find_element(By.CSS_SELECTOR, "button[contains(text(), 'Create')], button[contains(text(), 'Add')], a[contains(text(), 'Create')], a[contains(text(), 'Add')]")
                print("‚úÖ Create business option available for admin")
            except NoSuchElementException:
                print("‚ö†Ô∏è  Create business button not found (might use different text or be a form)")
            
        finally:
            self.teardown_driver()
    
    def test_04_regular_user_permissions(self):
        """Test that regular users get proper 403 errors for admin operations."""
        print("\nüö´ TESTING REGULAR USER PERMISSIONS")
        print("=" * 50)
        
        # First create a regular user via API
        regular_user = {
            "email": "e2etest@example.com",
            "username": "e2euser",
            "password": "E2ETest123!"
        }
        
        try:
            requests.post(f"{self.backend_url}/api/v1/auth/register", json=regular_user)
            print("‚úÖ Regular user created")
        except Exception:
            print("‚ö†Ô∏è  Regular user might already exist")
        
        # Test API access with regular user
        try:
            login_response = requests.post(f"{self.backend_url}/api/v1/auth/login", 
                                         data={"username": "e2euser", "password": "E2ETest123!"})
            
            if login_response.status_code == 200:
                user_token = login_response.json()["access_token"]
                headers = {"Authorization": f"Bearer {user_token}"}
                
                # Test admin-only endpoint (should get 403)
                admin_response = requests.get(f"{self.backend_url}/api/v1/users/", headers=headers)
                
                if admin_response.status_code == 403:
                    print("‚úÖ Regular user correctly denied admin access (403)")
                else:
                    print(f"‚ùå Expected 403, got {admin_response.status_code}")
                
                # Test /me endpoint (should work)
                me_response = requests.get(f"{self.backend_url}/api/v1/auth/me", headers=headers)
                
                if me_response.status_code == 200:
                    print("‚úÖ Regular user can access /me endpoint")
                else:
                    print(f"‚ùå /me endpoint failed with status {me_response.status_code}")
            
        except Exception as e:
            print(f"‚ùå Regular user API test failed: {e}")
    
    def test_05_business_crud_flow(self):
        """Test complete business CRUD flow through API."""
        print("\nüè¢ TESTING BUSINESS CRUD FLOW")
        print("=" * 50)
        
        if not self.admin_token:
            print("‚ö†Ô∏è  Admin token not available, skipping CRUD test")
            return
        
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        business_id = None
        
        try:
            # CREATE business
            business_data = {
                "name": "E2E Test Cafe",
                "description": "Business created during E2E testing",
                "address": "123 E2E Test Street",
                "business_type": "cafe"
            }
            
            create_response = requests.post(f"{self.backend_url}/api/v1/businesses", 
                                          json=business_data, headers=headers)
            
            if create_response.status_code in [200, 201]:
                business_id = create_response.json()["id"]
                print("‚úÖ Business created successfully")
            else:
                print(f"‚ùå Business creation failed: {create_response.status_code}")
                return
            
            # READ business
            read_response = requests.get(f"{self.backend_url}/api/v1/businesses/{business_id}", 
                                       headers=headers)
            
            if read_response.status_code == 200:
                business = read_response.json()
                assert business["name"] == business_data["name"]
                print("‚úÖ Business read successfully")
            else:
                print(f"‚ùå Business read failed: {read_response.status_code}")
            
            # UPDATE business
            update_data = {"description": "Updated during E2E testing"}
            update_response = requests.put(f"{self.backend_url}/api/v1/businesses/{business_id}", 
                                         json=update_data, headers=headers)
            
            if update_response.status_code == 200:
                updated_business = update_response.json()
                assert updated_business["description"] == update_data["description"]
                print("‚úÖ Business updated successfully")
            else:
                print(f"‚ùå Business update failed: {update_response.status_code}")
            
            # Test product operations on this business
            self._test_product_crud(business_id, headers)
            
        except Exception as e:
            print(f"‚ùå Business CRUD test failed: {e}")
        
        finally:
            # Cleanup: DELETE business
            if business_id:
                try:
                    delete_response = requests.delete(f"{self.backend_url}/api/v1/businesses/{business_id}", 
                                                    headers=headers)
                    if delete_response.status_code in [200, 204]:
                        print("‚úÖ Business deleted successfully (cleanup)")
                    else:
                        print(f"‚ö†Ô∏è  Business deletion failed: {delete_response.status_code}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Cleanup failed: {e}")
    
    def _test_product_crud(self, business_id: str, headers: Dict):
        """Test product CRUD operations within a business."""
        print("üì¶ Testing product CRUD...")
        
        product_id = None
        
        try:
            # CREATE product
            product_data = {
                "name": "E2E Test Latte",
                "description": "Product created during E2E testing",
                "price": 4.99,
                "category": "beverages"
            }
            
            create_response = requests.post(f"{self.backend_url}/api/v1/businesses/{business_id}/products", 
                                          json=product_data, headers=headers)
            
            if create_response.status_code in [200, 201]:
                product_id = create_response.json()["id"]
                print("‚úÖ Product created successfully")
            else:
                print(f"‚ùå Product creation failed: {create_response.status_code}")
                return
            
            # READ product
            read_response = requests.get(f"{self.backend_url}/api/v1/businesses/{business_id}/products/{product_id}", 
                                       headers=headers)
            
            if read_response.status_code == 200:
                product = read_response.json()
                assert product["name"] == product_data["name"]
                print("‚úÖ Product read successfully")
            else:
                print(f"‚ùå Product read failed: {read_response.status_code}")
            
            # UPDATE product
            update_data = {"price": 5.99, "description": "Updated during E2E testing"}
            update_response = requests.put(f"{self.backend_url}/api/v1/businesses/{business_id}/products/{product_id}", 
                                         json=update_data, headers=headers)
            
            if update_response.status_code == 200:
                updated_product = update_response.json()
                assert updated_product["price"] == update_data["price"]
                print("‚úÖ Product updated successfully")
            else:
                print(f"‚ùå Product update failed: {update_response.status_code}")
            
        except Exception as e:
            print(f"‚ùå Product CRUD test failed: {e}")
        
        finally:
            # Cleanup: DELETE product
            if product_id:
                try:
                    delete_response = requests.delete(f"{self.backend_url}/api/v1/businesses/{business_id}/products/{product_id}", 
                                                    headers=headers)
                    if delete_response.status_code in [200, 204]:
                        print("‚úÖ Product deleted successfully (cleanup)")
                    else:
                        print(f"‚ö†Ô∏è  Product deletion failed: {delete_response.status_code}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Product cleanup failed: {e}")
    
    def test_06_error_handling_validation(self):
        """Test error handling across the stack."""
        print("\nüõ°Ô∏è  TESTING ERROR HANDLING")
        print("=" * 50)
        
        if not self.admin_token:
            print("‚ö†Ô∏è  Admin token not available, skipping error tests")
            return
        
        headers = {"Authorization": f"Bearer {self.admin_token}"}
        
        # Test 404 errors
        response_404 = requests.get(f"{self.backend_url}/api/v1/businesses/550e8400-e29b-41d4-a716-446655440000", 
                                   headers=headers)
        if response_404.status_code == 404:
            print("‚úÖ 404 error handled correctly for non-existent business")
        else:
            print(f"‚ùå Expected 404, got {response_404.status_code}")
        
        # Test 422 validation errors
        invalid_business = {"name": ""}  # Empty name should fail validation
        response_422 = requests.post(f"{self.backend_url}/api/v1/businesses", 
                                   json=invalid_business, headers=headers)
        if response_422.status_code == 422:
            print("‚úÖ 422 validation error handled correctly")
        else:
            print(f"‚ùå Expected 422, got {response_422.status_code}")
        
        # Test 401 errors (invalid token)
        invalid_headers = {"Authorization": "Bearer invalid_token"}
        response_401 = requests.get(f"{self.backend_url}/api/v1/auth/me", headers=invalid_headers)
        if response_401.status_code == 401:
            print("‚úÖ 401 unauthorized error handled correctly")
        else:
            print(f"‚ùå Expected 401, got {response_401.status_code}")
    
    def test_07_generate_e2e_report(self):
        """Generate comprehensive E2E test report."""
        print("\nüìä E2E TEST REPORT")
        print("=" * 60)
        
        # Count test results
        total_tests = 7  # Number of test methods
        passed_tests = 0
        failed_tests = 0
        
        # This is a simplified report - in real implementation,
        # you'd track results from each test method
        print(f"Total E2E Tests: {total_tests}")
        print(f"Services Checked: Backend + Frontend")
        print(f"Features Tested: Auth, Permissions, CRUD, Error Handling")
        
        print(f"\nüîç TEST COVERAGE:")
        print(f"  ‚úÖ Service availability validation")
        print(f"  ‚úÖ Frontend login flow with error handling")
        print(f"  ‚úÖ Admin permissions validation")
        print(f"  ‚úÖ Regular user permission restrictions")
        print(f"  ‚úÖ Complete business CRUD operations")
        print(f"  ‚úÖ Product CRUD within business context")
        print(f"  ‚úÖ Error handling (401/403/404/422)")
        
        print(f"\nüí° RECOMMENDATIONS:")
        print(f"  - Ensure both backend and frontend are running for full E2E testing")
        print(f"  - Install ChromeDriver for comprehensive UI testing")
        print(f"  - Run E2E tests in CI/CD pipeline before deployment")
        print(f"  - Monitor error handling consistency across UI and API")


def test_run_e2e_suite():
    """Run the complete E2E test suite."""
    suite = E2ETestSuite()
    
    print("\nüöÄ STARTING END-TO-END TEST SUITE")
    print("=" * 80)
    
    test_methods = [
        suite.test_01_services_running,
        suite.test_02_frontend_login_flow,
        suite.test_03_admin_permissions_frontend,
        suite.test_04_regular_user_permissions,
        suite.test_05_business_crud_flow,
        suite.test_06_error_handling_validation,
        suite.test_07_generate_e2e_report,
    ]
    
    for test_method in test_methods:
        try:
            test_method()
            suite.test_results['passed'] += 1
        except Exception as e:
            print(f"‚ùå {test_method.__name__} failed: {e}")
            suite.test_results['failed'] += 1
            suite.test_results['errors'].append(f"{test_method.__name__}: {e}")
        
        suite.test_results['total_tests'] += 1
    
    # Final summary
    print(f"\nüéØ E2E TEST SUMMARY:")
    print(f"   Total: {suite.test_results['total_tests']}")
    print(f"   Passed: {suite.test_results['passed']}")
    print(f"   Failed: {suite.test_results['failed']}")
    
    if suite.test_results['errors']:
        print(f"\n‚ùå Errors encountered:")
        for error in suite.test_results['errors']:
            print(f"   - {error}")


if __name__ == "__main__":
    test_run_e2e_suite()