{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(npm create:*)",
      "Bash(npm install)",
      "Bash(npm install:*)",
      "Bash(npx tailwindcss init:*)",
      "Bash(git init:*)",
      "Bash(git checkout:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git config:*)",
      "Bash(rm:*)",
      "Bash(touch:*)",
      "Bash(find:*)",
      "Bash(npm uninstall:*)",
      "Bash(npm run dev:*)",
      "Bash(timeout 10s npm run dev)",
      "Bash(true)",
      "Bash(mv:*)",
      "Bash(ls:*)",
      "Bash(python -m alembic revision:*)",
      "Bash(chmod:*)",
      "Bash(alembic revision:*)",
      "Bash(pip install:*)",
      "Bash(python3 -m pip install:*)",
      "Bash(python3:*)",
      "Bash(grep:*)",
      "Bash(python -m pip install:*)",
      "Bash(npm run type-check:*)",
      "Bash(alembic upgrade:*)",
      "Bash(python:*)",
      "Bash(USE_SQLITE=true python3 -m alembic upgrade head)",
      "Bash(timeout:*)",
      "Bash(USE_SQLITE=true timeout 10s python3 -c \"import uvicorn; from app.main import app; print(''✓ Starting API server with SQLite...''); uvicorn.run(app, host=''127.0.0.1'', port=8000, log_level=''error'')\")",
      "Bash(rg:*)",
      "Bash(./scripts/update_and_test.sh:*)",
      "Bash(dos2unix:*)",
      "Bash(sed:*)",
      "Bash(pip3 install:*)",
      "Bash(source:*)",
      "Bash(venv/Scripts/python.exe -m pip install:*)",
      "Bash(venv/Scripts/python.exe -m pytest ../tests/ --cov=app --cov-report=term-missing --ignore=../tests/test_e2e_flow.py)",
      "Bash(backend/venv/Scripts/python.exe -m pytest tests/ --cov=backend/app --cov-report=term-missing --ignore=tests/test_e2e_flow.py)",
      "Bash(PYTHONPATH=backend python3 -m pytest tests/test_auth.py -v)",
      "Bash(USE_SQLITE=true PYTHONPATH=backend python3 -m pytest tests/test_auth.py -v)",
      "Bash(USE_SQLITE=true PYTHONPATH=backend alembic -c backend/alembic.ini upgrade head)",
      "Bash(sqlite3:*)",
      "Bash(USE_SQLITE=true PYTHONPATH=backend python3 -m alembic -c backend/alembic.ini upgrade head)",
      "Bash(USE_SQLITE=true PYTHONPATH=. python3 -m alembic upgrade head)",
      "Bash(USE_SQLITE=true PYTHONPATH=. python3 -m alembic downgrade base)",
      "Bash(USE_SQLITE=true PYTHONPATH=. python3 create_test_db.py)",
      "Bash(pytest:*)",
      "Bash(sudo rm:*)",
      "Bash(pkill:*)",
      "Bash(kill:*)",
      "Bash(curl:*)",
      "Bash(node:*)",
      "Bash(npm audit:*)",
      "Bash(npm outdated)",
      "Bash(npm test)",
      "Bash(git reset:*)",
      "Bash(export USE_SQLITE=true)",
      "Bash(export TESTING=true)",
      "Bash(USE_SQLITE=true python3 -c \"from app.db.db import get_engine; engine = get_engine(); print('✅ Engine created successfully'); engine.dispose(); print('✅ Engine disposed correctly')\")",
      "Bash(cp:*)",
      "Bash(./venv/Scripts/pip.exe install:*)",
      "Bash(for i in {1..6})",
      "Bash(do echo \"=== Intento $i ===\")",
      "Bash(done)",
      "Bash(venv/Scripts/python.exe -m pytest tests/test_auth_comprehensive.py --cov=app.api.v1.auth --cov-report=html 2 >& 1)",
      "Bash(venv/Scripts/python.exe -m pytest tests/test_auth_comprehensive.py --cov=app.api.v1.auth --cov-report=term -v 2 >& 1)",
      "Bash(venv/Scripts/python.exe -m pytest tests/test_auth_comprehensive.py::TestUserLogin::test_login_success -v -s 2 >& 1)",
      "Bash(venv/Scripts/python.exe -m pytest tests/test_auth_comprehensive.py --cov=app.api.v1.auth --cov-report=term 2 >& 1)",
      "Bash(venv/Scripts/python.exe -m pytest tests/test_auth_comprehensive.py::TestJWTAuthentication::test_refresh_token_without_auth -v --tb=short 2 >& 1)",
      "Bash(venv/Scripts/python.exe -m pytest tests/test_auth_comprehensive.py -v 2 >& 1)",
      "Bash(venv/Scripts/python.exe:*)",
      "Bash(venv/Scripts/pip.exe show:*)",
      "Bash(venv/Scripts/pip.exe list:*)",
      "Bash(venv/Scripts/pip.exe install:*)",
      "Bash(venv/Scripts/safety.exe check:*)",
      "Bash(cat:*)",
      "Bash(test:*)",
      "Bash(diff:*)",
      "Bash(pyflakes:*)",
      "Bash(git check-ignore:*)"
    ],
    "deny": []
  }
}