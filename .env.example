# Environment Configuration
ENVIRONMENT=development

# Database Configuration
# SECURITY: Change these default values immediately!
POSTGRES_DB=saas_cafeterias
POSTGRES_USER=CHANGE_ME_database_username
# Generate strong password: openssl rand -base64 24
# IMPORTANT: For passwords with special characters (ñ, á, @, #, etc.), 
# use URL encoding or set DATABASE_URL directly with encoded values
POSTGRES_PASSWORD=CHANGE_ME_generate_strong_password_min_16_chars
POSTGRES_HOST=localhost
POSTGRES_PORT=5432

# Method 1: Use individual variables (password will be auto-encoded)
# DATABASE_URL will be built automatically with proper UTF-8 encoding

# Method 2: Use direct DATABASE_URL with manual encoding if needed
# For special characters in password, use URL encoding:
# @ becomes %40, # becomes %23, ñ becomes %C3%B1, etc.
# Example with special characters:
# DATABASE_URL=postgresql://user:myp%40ssw%C3%B1rd@localhost:5432/saas_cafeterias?client_encoding=utf8
DATABASE_URL=postgresql://saasuser:saaspass@localhost:5432/saas_cafeterias

# Test Database Configuration (for integration tests with PostgreSQL)
# NEVER use production credentials for tests!
POSTGRES_TEST_USER=test_user
POSTGRES_TEST_PASSWORD=CHANGE_ME_test_password_different_from_prod
POSTGRES_TEST_HOST=localhost
POSTGRES_TEST_PORT=5432
# Set to "true" to use PostgreSQL for tests instead of SQLite
USE_POSTGRES_TESTS=false

# Redis Configuration
REDIS_URL=redis://localhost:6379/0
REDIS_PORT=6379

# Celery Configuration
CELERY_BROKER_URL=redis://localhost:6379/1
CELERY_RESULT_BACKEND=redis://localhost:6379/2

# Security
# CRITICAL: Generate unique secrets for each environment!
# Generate with: python3 -c "import secrets; print(secrets.token_urlsafe(64))"
# NEVER use the example values below - generate your own!
SECRET_KEY=CHANGE_ME_run_python_command_above_to_generate_64_char_secret
JWT_SECRET_KEY=CHANGE_ME_run_python_command_above_to_generate_different_64_char_secret
JWT_ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30
REFRESH_TOKEN_EXPIRE_DAYS=7

# External APIs
# Get your keys from: https://www.mercadopago.com/developers
MERCADOPAGO_ACCESS_TOKEN=TEST-your-test-access-token-from-mercadopago-dashboard
MERCADOPAGO_PUBLIC_KEY=TEST-your-test-public-key-from-mercadopago-dashboard
# Get your key from: https://platform.openai.com/api-keys
OPENAI_API_KEY=sk-proj-CHANGE_ME_get_from_openai_dashboard

# CORS Configuration
ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173
ALLOWED_METHODS=GET,POST,PUT,DELETE,OPTIONS
ALLOWED_HEADERS=*

# Application Ports
BACKEND_PORT=8000
FRONTEND_PORT=3000
FLOWER_PORT=5555
HTTP_PORT=80
HTTPS_PORT=443

# Frontend Configuration
VITE_API_URL=http://localhost:8000
VITE_ENVIRONMENT=development

# Docker Compose Overrides
COMPOSE_PROJECT_NAME=saas_cafeterias

# Logging
LOG_LEVEL=INFO

# Rate Limiting
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=3600

# Email Configuration (Optional)
# For Gmail: Use App Passwords (https://support.google.com/accounts/answer/185833)
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=CHANGE_ME_your_email@gmail.com
SMTP_PASSWORD=CHANGE_ME_gmail_app_password_16_chars
EMAIL_FROM=noreply@yourdomain.com

# Monitoring (Optional)
SENTRY_DSN=your-sentry-dsn

# Secrets Management Configuration
SECRETS_BACKEND=environment  # environment, file, vault, aws
SECRETS_DIR=secrets

# HashiCorp Vault (if using vault backend)
# NEVER commit production Vault tokens!
VAULT_URL=http://localhost:8200
VAULT_TOKEN=CHANGE_ME_vault_root_token_or_use_vault_login
VAULT_MOUNT_POINT=secret

# AWS Secrets Manager (if using aws backend)
AWS_REGION=us-east-1
AWS_PROFILE=default