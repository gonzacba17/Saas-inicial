# Secrets management services for development and testing
version: '3.8'

services:
  # HashiCorp Vault for secrets management
  vault:
    image: hashicorp/vault:latest
    container_name: saas_vault
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=myroot
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_ADDR=http://0.0.0.0:8200
    ports:
      - "8200:8200"
    networks:
      - saas-network
    cap_add:
      - IPC_LOCK
    command: ["vault", "server", "-dev"]
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Vault UI (optional)
  vault-ui:
    image: djenriquez/vault-ui:latest
    container_name: saas_vault_ui
    environment:
      - VAULT_URL_DEFAULT=http://vault:8200
      - VAULT_AUTH_DEFAULT=TOKEN
    ports:
      - "8000:8000"
    networks:
      - saas-network
    depends_on:
      - vault
    restart: unless-stopped

  # AWS LocalStack for testing AWS Secrets Manager locally
  localstack:
    image: localstack/localstack:latest
    container_name: saas_localstack
    environment:
      - SERVICES=secretsmanager
      - DEFAULT_REGION=us-east-1
      - DATA_DIR=/tmp/localstack/data
      - HOST_TMP_FOLDER=/tmp/localstack
      - DOCKER_HOST=unix:///var/run/docker.sock
    ports:
      - "4566:4566"  # LocalStack endpoint
      - "4510-4559:4510-4559"  # Additional service ports
    volumes:
      - "/tmp/localstack:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - saas-network
    restart: unless-stopped

  # Secrets initialization service
  secrets-init:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: saas_secrets_init
    environment:
      - SECRETS_BACKEND=${SECRETS_BACKEND:-file}
      - VAULT_URL=http://vault:8200
      - VAULT_TOKEN=myroot
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_REGION=us-east-1
    volumes:
      - ./secrets:/app/secrets
      - ./scripts:/app/scripts
    networks:
      - saas-network
    depends_on:
      vault:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for services to be ready...' &&
        sleep 10 &&
        echo 'Initializing secrets...' &&
        python -c '
import asyncio
import sys
sys.path.append(\"/app\")
from app.services_directory.secrets_service import secrets_manager

async def init_secrets():
    print(\"Setting up example secrets...\")
    
    # Database secret
    await secrets_manager.set_secret(\"database\", {
        \"host\": \"db\",
        \"port\": \"5432\",
        \"user\": \"saasuser\",
        \"password\": \"saaspass\",
        \"database\": \"saas_cafeterias\"
    })
    
    # JWT secret
    await secrets_manager.set_secret(\"jwt\", {
        \"secret_key\": \"dev-jwt-secret-key-64-chars-minimum-for-development-only\",
        \"algorithm\": \"HS256\"
    })
    
    # API keys
    await secrets_manager.set_secret(\"api_keys\", {
        \"mercadopago_token\": \"TEST-your-dev-mercadopago-token\",
        \"openai_key\": \"sk-your-dev-openai-key\",
        \"smtp_password\": \"your-dev-smtp-password\"
    })
    
    print(\"Secrets initialized successfully!\")

asyncio.run(init_secrets())
        '
      "
    restart: "no"

networks:
  saas-network:
    external: true