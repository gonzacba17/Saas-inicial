version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: saas-postgres-prod
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-prod_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-saas_cafeterias_prod}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=es_AR.UTF-8 --lc-ctype=es_AR.UTF-8"
    volumes:
      - pgdata_prod:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-prod_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - saas-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: saas-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redisdata_prod:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 15s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - saas-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    build:
      context: ./backend
      target: runtime
      args:
        - BUILD_ENV=production
    container_name: saas-backend-prod
    command: gunicorn app.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000 --timeout 30 --keepalive 5 --max-requests 1000 --max-requests-jitter 50 --access-logfile - --error-logfile -
    env_file:
      - .env.production
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-prod_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-saas_cafeterias_prod}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/2
      - ENVIRONMENT=production
      - DEBUG=false
    volumes:
      - backend_uploads_prod:/app/uploads:rw
      - backend_chroma_prod:/app/chroma_db:rw
      - backend_logs_prod:/app/logs:rw
    expose:
      - "8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - saas-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

  worker:
    build:
      context: ./backend
      target: worker
      args:
        - BUILD_ENV=production
    container_name: saas-worker-prod
    command: celery -A app.tasks worker --loglevel=info --concurrency=2 --max-tasks-per-child=100
    env_file:
      - .env.production
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-prod_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-saas_cafeterias_prod}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/2
      - ENVIRONMENT=production
    volumes:
      - backend_uploads_prod:/app/uploads:rw
      - backend_logs_prod:/app/logs:rw
    depends_on:
      - postgres
      - redis
      - backend
    healthcheck:
      test: ["CMD-SHELL", "celery -A app.tasks inspect ping -d celery@$HOSTNAME"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M
    networks:
      - saas-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  beat:
    build:
      context: ./backend
      target: beat
      args:
        - BUILD_ENV=production
    container_name: saas-beat-prod
    command: celery -A app.tasks beat --loglevel=info --pidfile=/tmp/celerybeat.pid
    env_file:
      - .env.production
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-prod_user}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-saas_cafeterias_prod}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/2
      - ENVIRONMENT=production
    volumes:
      - backend_logs_prod:/app/logs:rw
    depends_on:
      - postgres
      - redis
      - backend
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - saas-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  frontend:
    build:
      context: ./frontend
      target: runtime
      args:
        - VITE_API_URL=${VITE_API_URL:-https://api.tu-dominio.com}
    container_name: saas-frontend-prod
    expose:
      - "80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - saas-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  nginx:
    image: nginx:alpine
    container_name: saas-nginx-prod
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs_prod:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - saas-network-prod
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"

volumes:
  pgdata_prod:
    driver: local
  redisdata_prod:
    driver: local
  backend_uploads_prod:
    driver: local
  backend_chroma_prod:
    driver: local
  backend_logs_prod:
    driver: local
  nginx_logs_prod:
    driver: local

networks:
  saas-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
