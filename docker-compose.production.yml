services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: saas_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-saas_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-change_this_password}
      POSTGRES_DB: ${POSTGRES_DB:-saas_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - saas_network

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: saas_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - saas_network

  # ChromaDB Vector Store (SIN HEALTH CHECK)
  chroma:
    image: chromadb/chroma:0.4.15
    container_name: saas_chroma
    environment:
      CHROMA_SERVER_HOST: 0.0.0.0
      CHROMA_SERVER_HTTP_PORT: 8000
      IS_PERSISTENT: "TRUE"
      ANONYMIZED_TELEMETRY: "FALSE"
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8001:8000"
    restart: unless-stopped
    networks:
      - saas_network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: saas-backend:latest
    container_name: saas_backend
    env_file:
      - .env.production
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-saas_user}:${POSTGRES_PASSWORD:-change_this_password}@db:5432/${POSTGRES_DB:-saas_db}
      REDIS_URL: redis://redis:6379/0
      CHROMA_HOST: chroma
      CHROMA_PORT: 8000
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - chroma_data:/app/chroma_db
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - chroma
    restart: unless-stopped
    networks:
      - saas_network

  # Celery Worker
  worker:
    image: saas-backend:latest
    container_name: saas_worker
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=2
    env_file:
      - .env.production
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-saas_user}:${POSTGRES_PASSWORD:-change_this_password}@db:5432/${POSTGRES_DB:-saas_db}
      REDIS_URL: redis://redis:6379/0
      CHROMA_HOST: chroma
      CHROMA_PORT: 8000
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/logs:/app/logs
      - chroma_data:/app/chroma_db
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - saas_network

  # Celery Beat
  beat:
    image: saas-backend:latest
    container_name: saas_beat
    command: celery -A app.core.celery_app beat --loglevel=info
    env_file:
      - .env.production
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-saas_user}:${POSTGRES_PASSWORD:-change_this_password}@db:5432/${POSTGRES_DB:-saas_db}
      REDIS_URL: redis://redis:6379/0
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - saas_network

  # Flower - Celery Monitoring
  flower:
    image: saas-backend:latest
    container_name: saas_flower
    command: celery -A app.core.celery_app flower --port=5555
    env_file:
      - .env.production
    environment:
      REDIS_URL: redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - saas_network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: saas-frontend:latest
    container_name: saas_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - saas_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  chroma_data:
    driver: local

networks:
  saas_network:
    driver: bridge